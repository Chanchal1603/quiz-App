{"version":3,"sources":["components/Button.js","components/Start.js","components/Countdown.js","components/question/Question.js","components/answer/Answer.js","components/QuizMain.js","App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","Intro","div","btnCSS","css","Start","props","onClick","Countdown","useState","num","setNum","pause","setPause","intervalRef","useRef","decreaseNum","prev","useEffect","current","setInterval","clearInterval","style","fontSize","Question","question","Answer","answers","Object","keys","answer","map","qAnswer","i","className","correctAnswer","clickedAnswer","checkAnswer","key","disabled","Quiz","state","quiestions","1","2","3","4","5","correctAnswers","step","score","setState","nextStep","this","length","Component","App","start","setStart","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46c4911a.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\n\r\nexport const Button = styled.button`\r\n    border: 1px solid #616A94;\r\n    border-radius: 50px;\r\n    padding: 15px 30px;\r\n    text-decoration: none;\r\n    color: #616A94;\r\n    background-color: #161A31;\r\n    transition: 0.3s;\r\n    font-size: 1em;\r\n    cursor: pointer;\r\n    outline: none;\r\n\r\n    &:hover {\r\n        color: white;\r\n        background-color: #616A94;\r\n    }\r\n`;\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport styled, { css } from 'styled-components/macro'\r\nimport Button from './Button';\r\n\r\nconst Intro = styled.div`\r\n  margin-top: 8em;\r\n  text-align: center;\r\n`;\r\n\r\nconst btnCSS = css`\r\n    margin-top: 0em;\r\n`;\r\n\r\n\r\nconst Start = ({props}) => {\r\n\r\n    const startQuiz = () => props(true)\r\n \r\n    return (\r\n        <Intro>\r\n            <h1>Take the quiz.</h1>\r\n            <h3>Before times out!</h3>\r\n            <h4>All The Best!</h4>\r\n            <Button onClick={startQuiz} css={btnCSS}>Begin</Button>\r\n        </Intro>\r\n    )\r\n}\r\n\r\nexport default Start\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nexport default function Countdown() {\r\n  const [num, setNum] = useState(100);\r\n  const [pause, setPause] = useState(false);\r\n  \r\n  let intervalRef = useRef();\r\n  \r\n  const decreaseNum = () => setNum((prev) => prev - 1);\r\n\r\n  useEffect(() => {\r\n    setPause(false);\r\n    intervalRef.current = setInterval(decreaseNum, 1000);\r\n\r\n    return () => clearInterval(intervalRef.current);\r\n  }, []);\r\n  \r\n  const handleClick = () => {\r\n    if (!pause) {\r\n      clearInterval(intervalRef.current);\r\n    } else {\r\n      intervalRef.current = setInterval(decreaseNum, 1000);\r\n    }\r\n    setPause((prev) => !prev);\r\n  };\r\n  return (\r\n    <div >\r\n      <center><div style = {{\r\n          fontSize: \"30px\"\r\n      }}>{num}</div>\r\n\r\n      <button style = {{\r\n          fontSize: \"20px\"\r\n      }}onClick={handleClick}>{pause ? \"Run\" : \"Pause\"}</button></center>\r\n      \r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport './Question.css';\n\nconst Question = (props) => {\n    return (\n        <h1>{props.question}</h1>\n    );\n}\n\nexport default Question;","import React from 'react';\nimport './Answer.css';\n\nconst Answer = (props) => {\n    let answers = Object.keys(props.answer)\n        .map((qAnswer, i) => (\n            <li\n            className=\n            {\n                props.correctAnswer === qAnswer ?\n                'correct' : \n                props.clickedAnswer === qAnswer ? \n                'incorrect' : ''\n            }\n            onClick={() => props.checkAnswer(qAnswer)}\n            key={qAnswer}>\n                {props.answer[qAnswer]}\n            </li>\n        ));\n\n        return (\n            <>\n                <ul disabled={props.clickedAnswer ? true : false} className=\"Answers\">\n                    {answers}\n                </ul>\n                <div>\n                    {\n                        props.correctAnswer ?\n                        'Correct Answer!' : \n                        props.clickedAnswer ? 'Incorrect Answer!' : ''\n                    }\n                </div>\n            </>\n        );\n}\n\nexport default Answer;","import React, {Component} from 'react';\nimport Question from './question/Question';\nimport Answer from './answer/Answer';\nimport './QuizMain.css';\n\nexport default class Quiz extends Component {\n    \n\n    // initiating the local state\n    state = {\n        quiestions: {\n            1: 'Which planet in our solar system is known as the Red Planet?',\n            2: 'Which is the smallest planet in our solar system?',\n            3: 'Which planet in our solar system is known as the Blue Planet?',\n            4: 'What is the name of the largest moon of Saturn?',\n            5: 'Who invented the Computer?'\n        },\n        answers: {\n            1: {\n                1: 'Mars',\n                2: 'Jupiter',\n                3: 'Saturn'\n            },\n            2: {\n                1: 'Venus',\n                2: 'Mercury',\n                3: 'Earth'\n            },\n            3: {\n                1: 'Earth',\n                2: 'Mars',\n                3: 'Saturn'\n            },\n            4: {\n                1: 'Jupiter',\n                2: 'Pluto',\n                3: 'Titan'\n            },\n            5: {\n                1: 'Charles Babbage',\n                2: 'Johannes Gutenberg',\n                3: 'Alexander Fleming'\n            }\n\n        },\n        correctAnswers: {\n            1: '1',\n            2: '2',\n            3: '1',\n            4: '3',\n            5: '1'\n        },\n        correctAnswer: 0,\n        clickedAnswer: 0,\n        step: 1,\n        score: 0\n    }\n\n    // the method that checks the correct answer\n    checkAnswer = answer => {\n        const { correctAnswers, step, score } = this.state;\n        if(answer === correctAnswers[step]){\n            this.setState({\n                score: score + 1,\n                correctAnswer: correctAnswers[step],\n                clickedAnswer: answer\n            });\n        }else{\n            this.setState({\n                correctAnswer: 0,\n                clickedAnswer: answer\n            });\n        }\n    }\n\n    // method to move to the next question\n    nextStep = (step) => {\n        this.setState({\n            step: step + 1,\n            correctAnswer: 0,\n            clickedAnswer: 0\n        });\n    }\n\n    render(){\n        let { quiestions, answers, correctAnswer, clickedAnswer, step, score } = this.state;\n        return(\n            \n            <div className=\"Content\">\n\n                \n                {step <= Object.keys(quiestions).length ? \n                    (<>\n                        <Question\n                            question={quiestions[step]}\n                        />\n                        <Answer\n                            answer={answers[step]}\n                            step={step}\n                            checkAnswer={this.checkAnswer}\n                            correctAnswer={correctAnswer}\n                            clickedAnswer={clickedAnswer}\n                        />\n                        <button\n                        className=\"NextStep\"\n                        disabled={\n                            clickedAnswer && Object.keys(quiestions).length >= step\n                            ? false : true\n                        }\n                        onClick={() => this.nextStep(step)}>Next</button>\n                    </>) : (\n                        <div className=\"finalPage\">\n                            <h1>You have completed the quiz!</h1>\n                            <p>Your score is: {score} of {Object.keys(quiestions).length}</p>\n                            <p>Thank you!</p>\n                        </div>\n                    )\n                }\n            </div>\n            \n        );\n        \n    }\n}","import React, {useState} from 'react';\nimport './App.css';\nimport Start from './components/Start';\nimport Countdown from './components/Countdown';\nimport Quiz from './components/QuizMain';\n\nfunction App() {\n  const [start, setStart] = useState(false);\n\n  return (\n    \n    <div className=\"App\">\n\n      { start ? <Quiz /> : <Start props={setStart} />} \n      \n    \n    <Countdown /></div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}